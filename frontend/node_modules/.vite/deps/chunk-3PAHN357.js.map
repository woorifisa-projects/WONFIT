{
  "version": 3,
  "sources": ["../../vuetify/src/composables/forwardRefs.ts"],
  "sourcesContent": ["// Types\nimport type { ComponentPublicInstance, Ref, UnwrapRef } from 'vue'\nimport type { UnionToIntersection } from '@/util'\n\nconst Refs = Symbol('Forwarded refs')\n\n/** Omit properties starting with P */\ntype OmitPrefix<T, P extends string> = [Extract<keyof T, `${P}${any}`>] extends [never] ? T : Omit<T, `${P}${any}`>\n\ntype OmitProps<T> = T extends { $props: any } ? Omit<T, keyof T['$props']> : T\n\nfunction getDescriptor (obj: any, key: PropertyKey) {\n  let currentObj = obj\n  while (currentObj) {\n    const descriptor = Reflect.getOwnPropertyDescriptor(currentObj, key)\n    if (descriptor) return descriptor\n    currentObj = Object.getPrototypeOf(currentObj)\n  }\n  return undefined\n}\n\nexport function forwardRefs<T extends {}, U extends Ref<HTMLElement | Omit<ComponentPublicInstance, '$emit' | '$slots'> | undefined>[]> (\n  target: T,\n  ...refs: U\n): T & UnionToIntersection<{ [K in keyof U]: OmitPrefix<OmitProps<NonNullable<UnwrapRef<U[K]>>>, '$'> }[number]> {\n  (target as any)[Refs] = refs\n\n  return new Proxy(target, {\n    get (target, key) {\n      if (Reflect.has(target, key)) {\n        return Reflect.get(target, key)\n      }\n\n      // Skip internal properties\n      if (typeof key === 'symbol' || key.startsWith('__')) return\n\n      for (const ref of refs) {\n        if (ref.value && Reflect.has(ref.value, key)) {\n          const val = Reflect.get(ref.value, key)\n          return typeof val === 'function'\n            ? val.bind(ref.value)\n            : val\n        }\n      }\n    },\n    has (target, key) {\n      if (Reflect.has(target, key)) {\n        return true\n      }\n\n      // Skip internal properties\n      if (typeof key === 'symbol' || key.startsWith('__')) return false\n\n      for (const ref of refs) {\n        if (ref.value && Reflect.has(ref.value, key)) {\n          return true\n        }\n      }\n      return false\n    },\n    set (target, key, value) {\n      if (Reflect.has(target, key)) {\n        return Reflect.set(target, key, value)\n      }\n\n      // Skip internal properties\n      if (typeof key === 'symbol' || key.startsWith('__')) return false\n\n      for (const ref of refs) {\n        if (ref.value && Reflect.has(ref.value, key)) {\n          return Reflect.set(ref.value, key, value)\n        }\n      }\n\n      return false\n    },\n    getOwnPropertyDescriptor (target, key) {\n      const descriptor = Reflect.getOwnPropertyDescriptor(target, key)\n      if (descriptor) return descriptor\n\n      // Skip internal properties\n      if (typeof key === 'symbol' || key.startsWith('__')) return\n\n      // Check each ref's own properties\n      for (const ref of refs) {\n        if (!ref.value) continue\n        const descriptor = getDescriptor(ref.value, key) ?? ('_' in ref.value ? getDescriptor(ref.value._?.setupState, key) : undefined)\n        if (descriptor) return descriptor\n      }\n\n      // Recursive search up each ref's prototype\n      for (const ref of refs) {\n        const childRefs = ref.value && (ref.value as any)[Refs]\n        if (!childRefs) continue\n        const queue = childRefs.slice()\n        while (queue.length) {\n          const ref = queue.shift()\n          const descriptor = getDescriptor(ref.value, key)\n          if (descriptor) return descriptor\n          const childRefs = ref.value && (ref.value as any)[Refs]\n          if (childRefs) queue.push(...childRefs)\n        }\n      }\n\n      return undefined\n    },\n  }) as any\n}\n"],
  "mappings": "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",
  "names": ["Refs", "Symbol", "getDescriptor", "obj", "key", "currentObj", "descriptor", "Reflect", "getOwnPropertyDescriptor", "Object", "getPrototypeOf", "undefined", "forwardRefs", "target", "_len", "arguments", "length", "refs", "Array", "_key", "Proxy", "get", "has", "startsWith", "ref", "value", "val", "bind", "set", "_", "setupState", "childRefs", "queue", "slice", "shift", "push"]
}
