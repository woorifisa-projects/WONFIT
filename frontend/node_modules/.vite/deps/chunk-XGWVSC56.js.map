{
  "version": 3,
  "sources": ["../../vuetify/src/util/color/APCA.ts", "../../vuetify/src/composables/theme.ts"],
  "sourcesContent": ["/**\n * WCAG 3.0 APCA perceptual contrast algorithm from https://github.com/Myndex/SAPC-APCA\n * @licence https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n * @see https://www.w3.org/WAI/GL/task-forces/silver/wiki/Visual_Contrast_of_Text_Subgroup\n */\n// Types\nimport type { RGB } from '@/util'\n\n// MAGICAL NUMBERS\n\n// sRGB Conversion to Relative Luminance (Y)\n\n// Transfer Curve (aka \"Gamma\") for sRGB linearization\n// Simple power curve vs piecewise described in docs\n// Essentially, 2.4 best models actual display\n// characteristics in combination with the total method\nconst mainTRC = 2.4\n\nconst Rco = 0.2126729 // sRGB Red Coefficient (from matrix)\nconst Gco = 0.7151522 // sRGB Green Coefficient (from matrix)\nconst Bco = 0.0721750 // sRGB Blue Coefficient (from matrix)\n\n// For Finding Raw SAPC Contrast from Relative Luminance (Y)\n\n// Constants for SAPC Power Curve Exponents\n// One pair for normal text, and one for reverse\n// These are the \"beating heart\" of SAPC\nconst normBG = 0.55\nconst normTXT = 0.58\nconst revTXT = 0.57\nconst revBG = 0.62\n\n// For Clamping and Scaling Values\n\nconst blkThrs = 0.03 // Level that triggers the soft black clamp\nconst blkClmp = 1.45 // Exponent for the soft black clamp curve\nconst deltaYmin = 0.0005 // Lint trap\nconst scaleBoW = 1.25 // Scaling for dark text on light\nconst scaleWoB = 1.25 // Scaling for light text on dark\nconst loConThresh = 0.078 // Threshold for new simple offset scale\nconst loConFactor = 12.82051282051282 // = 1/0.078,\nconst loConOffset = 0.06 // The simple offset\nconst loClip = 0.001 // Output clip (lint trap #2)\n\nexport function APCAcontrast (text: RGB, background: RGB) {\n  // Linearize sRGB\n  const Rtxt = (text.r / 255) ** mainTRC\n  const Gtxt = (text.g / 255) ** mainTRC\n  const Btxt = (text.b / 255) ** mainTRC\n\n  const Rbg = (background.r / 255) ** mainTRC\n  const Gbg = (background.g / 255) ** mainTRC\n  const Bbg = (background.b / 255) ** mainTRC\n\n  // Apply the standard coefficients and sum to Y\n  let Ytxt = (Rtxt * Rco) + (Gtxt * Gco) + (Btxt * Bco)\n  let Ybg = (Rbg * Rco) + (Gbg * Gco) + (Bbg * Bco)\n\n  // Soft clamp Y when near black.\n  // Now clamping all colors to prevent crossover errors\n  if (Ytxt <= blkThrs) Ytxt += (blkThrs - Ytxt) ** blkClmp\n  if (Ybg <= blkThrs) Ybg += (blkThrs - Ybg) ** blkClmp\n\n  // Return 0 Early for extremely low ∆Y (lint trap #1)\n  if (Math.abs(Ybg - Ytxt) < deltaYmin) return 0.0\n\n  // SAPC CONTRAST\n\n  let outputContrast: number // For weighted final values\n  if (Ybg > Ytxt) {\n    // For normal polarity, black text on white\n    // Calculate the SAPC contrast value and scale\n\n    const SAPC = ((Ybg ** normBG) - (Ytxt ** normTXT)) * scaleBoW\n\n    // NEW! SAPC SmoothScale™\n    // Low Contrast Smooth Scale Rollout to prevent polarity reversal\n    // and also a low clip for very low contrasts (lint trap #2)\n    // much of this is for very low contrasts, less than 10\n    // therefore for most reversing needs, only loConOffset is important\n    outputContrast =\n      (SAPC < loClip) ? 0.0\n      : (SAPC < loConThresh) ? SAPC - SAPC * loConFactor * loConOffset\n      : SAPC - loConOffset\n  } else {\n    // For reverse polarity, light text on dark\n    // WoB should always return negative value.\n\n    const SAPC = ((Ybg ** revBG) - (Ytxt ** revTXT)) * scaleWoB\n\n    outputContrast =\n      (SAPC > -loClip) ? 0.0\n      : (SAPC > -loConThresh) ? SAPC - SAPC * loConFactor * loConOffset\n      : SAPC + loConOffset\n  }\n\n  return outputContrast * 100\n}\n", "// Utilities\nimport {\n  computed,\n  inject,\n  provide,\n  ref,\n  watch,\n  watchEffect,\n} from 'vue'\nimport {\n  createRange,\n  darken,\n  getCurrentInstance,\n  getLuma,\n  IN_BROWSER,\n  lighten,\n  mergeDeep,\n  parseColor,\n  propsFactory,\n  RGBtoHex,\n} from '@/util'\nimport { APCAcontrast } from '@/util/color/APCA'\n\n// Types\nimport type { HeadClient } from '@vueuse/head'\nimport type { App, DeepReadonly, InjectionKey, Ref } from 'vue'\n\ntype DeepPartial<T> = T extends object ? { [P in keyof T]?: DeepPartial<T[P]> } : T\n\nexport type ThemeOptions = false | {\n  cspNonce?: string\n  defaultTheme?: string\n  variations?: false | VariationsOptions\n  themes?: Record<string, ThemeDefinition>\n}\nexport type ThemeDefinition = DeepPartial<InternalThemeDefinition>\n\ninterface InternalThemeOptions {\n  cspNonce?: string\n  isDisabled: boolean\n  defaultTheme: string\n  variations: false | VariationsOptions\n  themes: Record<string, InternalThemeDefinition>\n}\n\ninterface VariationsOptions {\n  colors: string[]\n  lighten: number\n  darken: number\n}\n\ninterface InternalThemeDefinition {\n  dark: boolean\n  colors: Colors\n  variables: Record<string, string | number>\n}\n\nexport interface Colors extends BaseColors, OnColors {\n  [key: string]: string\n}\n\ninterface BaseColors {\n  background: string\n  surface: string\n  primary: string\n  secondary: string\n  success: string\n  warning: string\n  error: string\n  info: string\n}\n\ninterface OnColors {\n  'on-background': string\n  'on-surface': string\n  'on-primary': string\n  'on-secondary': string\n  'on-success': string\n  'on-warning': string\n  'on-error': string\n  'on-info': string\n}\n\nexport interface ThemeInstance {\n  readonly isDisabled: boolean\n  readonly themes: Ref<Record<string, InternalThemeDefinition>>\n\n  readonly name: Readonly<Ref<string>>\n  readonly current: DeepReadonly<Ref<InternalThemeDefinition>>\n  readonly computedThemes: DeepReadonly<Ref<Record<string, InternalThemeDefinition>>>\n\n  readonly themeClasses: Readonly<Ref<string | undefined>>\n  readonly styles: Readonly<Ref<string>>\n\n  readonly global: {\n    readonly name: Ref<string>\n    readonly current: DeepReadonly<Ref<InternalThemeDefinition>>\n  }\n}\n\nexport const ThemeSymbol: InjectionKey<ThemeInstance> = Symbol.for('vuetify:theme')\n\nexport const makeThemeProps = propsFactory({\n  theme: String,\n}, 'theme')\n\nconst defaultThemeOptions: Exclude<ThemeOptions, false> = {\n  defaultTheme: 'light',\n  variations: { colors: [], lighten: 0, darken: 0 },\n  themes: {\n    light: {\n      dark: false,\n      colors: {\n        background: '#FFFFFF',\n        surface: '#FFFFFF',\n        'surface-variant': '#424242',\n        'on-surface-variant': '#EEEEEE',\n        primary: '#6200EE',\n        'primary-darken-1': '#3700B3',\n        secondary: '#03DAC6',\n        'secondary-darken-1': '#018786',\n        error: '#B00020',\n        info: '#2196F3',\n        success: '#4CAF50',\n        warning: '#FB8C00',\n      },\n      variables: {\n        'border-color': '#000000',\n        'border-opacity': 0.12,\n        'high-emphasis-opacity': 0.87,\n        'medium-emphasis-opacity': 0.60,\n        'disabled-opacity': 0.38,\n        'idle-opacity': 0.04,\n        'hover-opacity': 0.04,\n        'focus-opacity': 0.12,\n        'selected-opacity': 0.08,\n        'activated-opacity': 0.12,\n        'pressed-opacity': 0.12,\n        'dragged-opacity': 0.08,\n        'theme-kbd': '#212529',\n        'theme-on-kbd': '#FFFFFF',\n        'theme-code': '#F5F5F5',\n        'theme-on-code': '#000000',\n      },\n    },\n    dark: {\n      dark: true,\n      colors: {\n        background: '#121212',\n        surface: '#212121',\n        'surface-variant': '#BDBDBD',\n        'on-surface-variant': '#424242',\n        primary: '#BB86FC',\n        'primary-darken-1': '#3700B3',\n        secondary: '#03DAC5',\n        'secondary-darken-1': '#03DAC5',\n        error: '#CF6679',\n        info: '#2196F3',\n        success: '#4CAF50',\n        warning: '#FB8C00',\n      },\n      variables: {\n        'border-color': '#FFFFFF',\n        'border-opacity': 0.12,\n        'high-emphasis-opacity': 1,\n        'medium-emphasis-opacity': 0.70,\n        'disabled-opacity': 0.50,\n        'idle-opacity': 0.10,\n        'hover-opacity': 0.04,\n        'focus-opacity': 0.12,\n        'selected-opacity': 0.08,\n        'activated-opacity': 0.12,\n        'pressed-opacity': 0.16,\n        'dragged-opacity': 0.08,\n        'theme-kbd': '#212529',\n        'theme-on-kbd': '#FFFFFF',\n        'theme-code': '#343434',\n        'theme-on-code': '#CCCCCC',\n      },\n    },\n  },\n}\n\nfunction parseThemeOptions (options: ThemeOptions = defaultThemeOptions): InternalThemeOptions {\n  if (!options) return { ...defaultThemeOptions, isDisabled: true } as InternalThemeOptions\n\n  const themes: Record<string, InternalThemeDefinition> = {}\n  for (const [key, theme] of Object.entries(options.themes ?? {})) {\n    const defaultTheme = theme.dark || key === 'dark'\n      ? defaultThemeOptions.themes?.dark\n      : defaultThemeOptions.themes?.light\n    themes[key] = mergeDeep(defaultTheme, theme) as InternalThemeDefinition\n  }\n\n  return mergeDeep(\n    defaultThemeOptions,\n    { ...options, themes },\n  ) as InternalThemeOptions\n}\n\n// Composables\nexport function createTheme (options?: ThemeOptions): ThemeInstance & { install: (app: App) => void } {\n  const parsedOptions = parseThemeOptions(options)\n  const name = ref(parsedOptions.defaultTheme)\n  const themes = ref(parsedOptions.themes)\n\n  const computedThemes = computed(() => {\n    const acc: Record<string, InternalThemeDefinition> = {}\n    for (const [name, original] of Object.entries(themes.value)) {\n      const theme: InternalThemeDefinition = acc[name] = {\n        ...original,\n        colors: {\n          ...original.colors,\n        },\n      }\n\n      if (parsedOptions.variations) {\n        for (const name of parsedOptions.variations.colors) {\n          const color = theme.colors[name]\n\n          if (!color) continue\n\n          for (const variation of (['lighten', 'darken'] as const)) {\n            const fn = variation === 'lighten' ? lighten : darken\n            for (const amount of createRange(parsedOptions.variations[variation], 1)) {\n              theme.colors[`${name}-${variation}-${amount}`] = RGBtoHex(fn(parseColor(color), amount))\n            }\n          }\n        }\n      }\n\n      for (const color of Object.keys(theme.colors)) {\n        if (/^on-[a-z]/.test(color) || theme.colors[`on-${color}`]) continue\n\n        const onColor = `on-${color}` as keyof OnColors\n        const colorVal = parseColor(theme.colors[color]!)\n\n        const blackContrast = Math.abs(APCAcontrast(parseColor(0), colorVal))\n        const whiteContrast = Math.abs(APCAcontrast(parseColor(0xffffff), colorVal))\n\n        // TODO: warn about poor color selections\n        // const contrastAsText = Math.abs(APCAcontrast(colorVal, colorToInt(theme.colors.background)))\n        // const minContrast = Math.max(blackContrast, whiteContrast)\n        // if (minContrast < 60) {\n        //   consoleInfo(`${key} theme color ${color} has poor contrast (${minContrast.toFixed()}%)`)\n        // } else if (contrastAsText < 60 && !['background', 'surface'].includes(color)) {\n        //   consoleInfo(`${key} theme color ${color} has poor contrast as text (${contrastAsText.toFixed()}%)`)\n        // }\n\n        // Prefer white text if both have an acceptable contrast ratio\n        theme.colors[onColor] = whiteContrast > Math.min(blackContrast, 50) ? '#fff' : '#000'\n      }\n    }\n\n    return acc\n  })\n  const current = computed(() => computedThemes.value[name.value])\n\n  const styles = computed(() => {\n    const lines: string[] = []\n\n    if (current.value.dark) {\n      createCssClass(lines, ':root', ['color-scheme: dark'])\n    }\n\n    createCssClass(lines, ':root', genCssVariables(current.value))\n\n    for (const [themeName, theme] of Object.entries(computedThemes.value)) {\n      createCssClass(lines, `.v-theme--${themeName}`, [\n        `color-scheme: ${theme.dark ? 'dark' : 'normal'}`,\n        ...genCssVariables(theme),\n      ])\n    }\n\n    const bgLines: string[] = []\n    const fgLines: string[] = []\n\n    const colors = new Set(Object.values(computedThemes.value).flatMap(theme => Object.keys(theme.colors)))\n    for (const key of colors) {\n      if (/^on-[a-z]/.test(key)) {\n        createCssClass(fgLines, `.${key}`, [`color: rgb(var(--v-theme-${key})) !important`])\n      } else {\n        createCssClass(bgLines, `.bg-${key}`, [\n          `--v-theme-overlay-multiplier: var(--v-theme-${key}-overlay-multiplier)`,\n          `background-color: rgb(var(--v-theme-${key})) !important`,\n          `color: rgb(var(--v-theme-on-${key})) !important`,\n        ])\n        createCssClass(fgLines, `.text-${key}`, [`color: rgb(var(--v-theme-${key})) !important`])\n        createCssClass(fgLines, `.border-${key}`, [`--v-border-color: var(--v-theme-${key})`])\n      }\n    }\n\n    lines.push(...bgLines, ...fgLines)\n\n    return lines.map((str, i) => i === 0 ? str : `    ${str}`).join('')\n  })\n\n  function getHead () {\n    return {\n      style: [{\n        children: styles.value,\n        id: 'vuetify-theme-stylesheet',\n        nonce: parsedOptions.cspNonce || false as never,\n      }],\n    }\n  }\n\n  function install (app: App) {\n    if (parsedOptions.isDisabled) return\n\n    const head = app._context.provides.usehead as HeadClient | undefined\n    if (head) {\n      if (head.push) {\n        const entry = head.push(getHead)\n        if (IN_BROWSER) {\n          watch(styles, () => { entry.patch(getHead) })\n        }\n      } else {\n        if (IN_BROWSER) {\n          head.addHeadObjs(computed(getHead))\n          watchEffect(() => head.updateDOM())\n        } else {\n          head.addHeadObjs(getHead())\n        }\n      }\n    } else {\n      let styleEl = IN_BROWSER\n        ? document.getElementById('vuetify-theme-stylesheet')\n        : null\n\n      if (IN_BROWSER) {\n        watch(styles, updateStyles, { immediate: true })\n      } else {\n        updateStyles()\n      }\n\n      function updateStyles () {\n        if (typeof document !== 'undefined' && !styleEl) {\n          const el = document.createElement('style')\n          el.type = 'text/css'\n          el.id = 'vuetify-theme-stylesheet'\n          if (parsedOptions.cspNonce) el.setAttribute('nonce', parsedOptions.cspNonce)\n\n          styleEl = el\n          document.head.appendChild(styleEl)\n        }\n\n        if (styleEl) styleEl.innerHTML = styles.value\n      }\n    }\n  }\n\n  const themeClasses = computed(() => parsedOptions.isDisabled ? undefined : `v-theme--${name.value}`)\n\n  return {\n    install,\n    isDisabled: parsedOptions.isDisabled,\n    name,\n    themes,\n    current,\n    computedThemes,\n    themeClasses,\n    styles,\n    global: {\n      name,\n      current,\n    },\n  }\n}\n\nexport function provideTheme (props: { theme?: string }) {\n  getCurrentInstance('provideTheme')\n\n  const theme = inject(ThemeSymbol, null)\n\n  if (!theme) throw new Error('Could not find Vuetify theme injection')\n\n  const name = computed<string>(() => {\n    return props.theme ?? theme?.name.value\n  })\n\n  const themeClasses = computed(() => theme.isDisabled ? undefined : `v-theme--${name.value}`)\n\n  const newTheme: ThemeInstance = {\n    ...theme,\n    name,\n    themeClasses,\n  }\n\n  provide(ThemeSymbol, newTheme)\n\n  return newTheme\n}\n\nexport function useTheme () {\n  getCurrentInstance('useTheme')\n\n  const theme = inject(ThemeSymbol, null)\n\n  if (!theme) throw new Error('Could not find Vuetify theme injection')\n\n  return theme\n}\n\nfunction createCssClass (lines: string[], selector: string, content: string[]) {\n  lines.push(\n    `${selector} {\\n`,\n    ...content.map(line => `  ${line};\\n`),\n    '}\\n',\n  )\n}\n\nfunction genCssVariables (theme: InternalThemeDefinition) {\n  const lightOverlay = theme.dark ? 2 : 1\n  const darkOverlay = theme.dark ? 1 : 2\n\n  const variables: string[] = []\n  for (const [key, value] of Object.entries(theme.colors)) {\n    const rgb = parseColor(value)\n    variables.push(`--v-theme-${key}: ${rgb.r},${rgb.g},${rgb.b}`)\n    if (!key.startsWith('on-')) {\n      variables.push(`--v-theme-${key}-overlay-multiplier: ${getLuma(value) > 0.18 ? lightOverlay : darkOverlay}`)\n    }\n  }\n\n  for (const [key, value] of Object.entries(theme.variables)) {\n    const color = typeof value === 'string' && value.startsWith('#') ? parseColor(value) : undefined\n    const rgb = color ? `${color.r}, ${color.g}, ${color.b}` : undefined\n    variables.push(`--v-${key}: ${rgb ?? value}`)\n  }\n\n  return variables\n}\n"],
  "mappings": "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",
  "names": ["mainTRC", "Rco", "Gco", "Bco", "normBG", "normTXT", "revTXT", "revBG", "blkThrs", "blkClmp", "deltaYmin", "scaleBoW", "scaleWoB", "loConThresh", "loConFactor", "loConOffset", "loClip", "APCAcontrast", "text", "background", "Rtxt", "r", "Gtxt", "g", "Btxt", "b", "Rbg", "Gbg", "Bbg", "Ytxt", "Ybg", "Math", "abs", "outputContrast", "SAPC", "ThemeSymbol", "Symbol", "for", "makeThemeProps", "propsFactory", "theme", "String", "defaultThemeOptions", "defaultTheme", "variations", "colors", "lighten", "darken", "themes", "light", "dark", "background", "surface", "primary", "secondary", "error", "info", "success", "warning", "variables", "parseThemeOptions", "options", "arguments", "length", "undefined", "isDisabled", "key", "Object", "entries", "mergeDeep", "createTheme", "parsedOptions", "name", "ref", "computedThemes", "computed", "acc", "original", "value", "color", "variation", "fn", "amount", "createRange", "RGBtoHex", "parseColor", "keys", "test", "onColor", "colorVal", "blackContrast", "Math", "abs", "APCAcontrast", "whiteContrast", "min", "current", "styles", "lines", "createCssClass", "genCssVariables", "themeName", "bgLines", "fgLines", "Set", "values", "flatMap", "push", "map", "str", "i", "join", "getHead", "style", "children", "id", "nonce", "cspNonce", "install", "app", "head", "_context", "provides", "usehead", "entry", "IN_BROWSER", "watch", "patch", "addHeadObjs", "watchEffect", "updateDOM", "updateStyles", "document", "styleEl", "el", "createElement", "type", "setAttribute", "appendChild", "innerHTML", "getElementById", "immediate", "themeClasses", "global", "provideTheme", "props", "getCurrentInstance", "inject", "Error", "newTheme", "provide", "useTheme", "selector", "content", "line", "lightOverlay", "darkOverlay", "rgb", "r", "g", "b", "startsWith", "getLuma"]
}
