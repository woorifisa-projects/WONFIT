{
  "version": 3,
  "sources": ["../../vuetify/src/composables/form.ts"],
  "sourcesContent": ["// Composables\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, inject, provide, ref, shallowRef, toRef, watch } from 'vue'\nimport { consoleWarn, propsFactory } from '@/util'\n\n// Types\nimport type { ComputedRef, InjectionKey, PropType, Ref } from 'vue'\nimport type { ValidationProps } from './validation'\n\nexport interface FormProvide {\n  register: (item: {\n    id: number | string\n    validate: () => Promise<string[]>\n    reset: () => void\n    resetValidation: () => void\n  }) => void\n  unregister: (id: number | string) => void\n  update: (id: number | string, isValid: boolean | null, errorMessages: string[]) => void\n  items: Ref<FormField[]>\n  isDisabled: ComputedRef<boolean>\n  isReadonly: ComputedRef<boolean>\n  isValidating: Ref<boolean>\n  isValid: Ref<boolean | null>\n  validateOn: Ref<FormProps['validateOn']>\n}\n\nexport interface FormField {\n  id: number | string\n  validate: () => Promise<string[]>\n  reset: () => void\n  resetValidation: () => void\n  isValid: boolean | null\n  errorMessages: string[]\n}\n\nexport interface FieldValidationResult {\n  id: number | string\n  errorMessages: string[]\n}\n\nexport interface FormValidationResult {\n  valid: boolean\n  errors: FieldValidationResult[]\n}\n\nexport interface SubmitEventPromise extends SubmitEvent, Promise<FormValidationResult> {}\n\nexport const FormKey: InjectionKey<FormProvide> = Symbol.for('vuetify:form')\n\nexport interface FormProps {\n  disabled: boolean\n  fastFail: boolean\n  readonly: boolean\n  modelValue: boolean | null\n  'onUpdate:modelValue': ((val: boolean | null) => void) | undefined\n  validateOn: ValidationProps['validateOn']\n}\n\nexport const makeFormProps = propsFactory({\n  disabled: Boolean,\n  fastFail: Boolean,\n  readonly: Boolean,\n  modelValue: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n  validateOn: {\n    type: String as PropType<FormProps['validateOn']>,\n    default: 'input',\n  },\n}, 'form')\n\nexport function createForm (props: FormProps) {\n  const model = useProxiedModel(props, 'modelValue')\n\n  const isDisabled = computed(() => props.disabled)\n  const isReadonly = computed(() => props.readonly)\n  const isValidating = shallowRef(false)\n  const items = ref<FormField[]>([])\n  const errors = ref<FieldValidationResult[]>([])\n\n  async function validate () {\n    const results = []\n    let valid = true\n\n    errors.value = []\n    isValidating.value = true\n\n    for (const item of items.value) {\n      const itemErrorMessages = await item.validate()\n\n      if (itemErrorMessages.length > 0) {\n        valid = false\n\n        results.push({\n          id: item.id,\n          errorMessages: itemErrorMessages,\n        })\n      }\n\n      if (!valid && props.fastFail) break\n    }\n\n    errors.value = results\n    isValidating.value = false\n\n    return { valid, errors: errors.value }\n  }\n\n  function reset () {\n    items.value.forEach(item => item.reset())\n  }\n\n  function resetValidation () {\n    items.value.forEach(item => item.resetValidation())\n  }\n\n  watch(items, () => {\n    let valid = 0\n    let invalid = 0\n    const results = []\n\n    for (const item of items.value) {\n      if (item.isValid === false) {\n        invalid++\n        results.push({\n          id: item.id,\n          errorMessages: item.errorMessages,\n        })\n      } else if (item.isValid === true) valid++\n    }\n\n    errors.value = results\n    model.value =\n      invalid > 0 ? false\n      : valid === items.value.length ? true\n      : null\n  }, { deep: true })\n\n  provide(FormKey, {\n    register: ({ id, validate, reset, resetValidation }) => {\n      if (items.value.some(item => item.id === id)) {\n        consoleWarn(`Duplicate input name \"${id}\"`)\n      }\n\n      items.value.push({\n        id,\n        validate,\n        reset,\n        resetValidation,\n        isValid: null,\n        errorMessages: [],\n      })\n    },\n    unregister: id => {\n      items.value = items.value.filter(item => {\n        return item.id !== id\n      })\n    },\n    update: (id, isValid, errorMessages) => {\n      const found = items.value.find(item => item.id === id)\n\n      if (!found) return\n\n      found.isValid = isValid\n      found.errorMessages = errorMessages\n    },\n    isDisabled,\n    isReadonly,\n    isValidating,\n    isValid: model,\n    items,\n    validateOn: toRef(props, 'validateOn'),\n  })\n\n  return {\n    errors,\n    isDisabled,\n    isReadonly,\n    isValidating,\n    isValid: model,\n    items,\n    validate,\n    reset,\n    resetValidation,\n  }\n}\n\nexport function useForm () {\n  return inject(FormKey, null)\n}\n"],
  "mappings": "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",
  "names": ["FormKey", "Symbol", "for", "makeFormProps", "propsFactory", "disabled", "Boolean", "fastFail", "readonly", "modelValue", "type", "default", "validateOn", "String", "createForm", "props", "model", "useProxiedModel", "isDisabled", "computed", "isReadonly", "isValidating", "shallowRef", "items", "ref", "errors", "validate", "results", "valid", "value", "item", "itemErrorMessages", "length", "push", "id", "errorMessages", "reset", "forEach", "resetValidation", "watch", "invalid", "isValid", "deep", "provide", "register", "_ref", "some", "consoleWarn", "unregister", "filter", "update", "found", "find", "toRef", "useForm", "inject"]
}
