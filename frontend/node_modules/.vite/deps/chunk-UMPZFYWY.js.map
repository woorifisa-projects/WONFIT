{
  "version": 3,
  "sources": ["../../vuetify/src/components/VProgressLinear/VProgressLinear.tsx", "../../vuetify/src/composables/intersectionObserver.ts", "../../vuetify/src/composables/loader.tsx"],
  "sourcesContent": ["// Styles\nimport './VProgressLinear.sass'\n\n// Composables\nimport { useBackgroundColor, useTextColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { useIntersectionObserver } from '@/composables/intersectionObserver'\nimport { useRtl } from '@/composables/locale'\nimport { makeLocationProps, useLocation } from '@/composables/location'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\n\n// Utilities\nimport { computed, Transition } from 'vue'\nimport { convertToUnit, genericComponent, propsFactory, useRender } from '@/util'\n\ntype VProgressLinearSlots = {\n  default: { value: number, buffer: number }\n}\n\nexport const makeVProgressLinearProps = propsFactory({\n  absolute: Boolean,\n  active: {\n    type: Boolean,\n    default: true,\n  },\n  bgColor: String,\n  bgOpacity: [Number, String],\n  bufferValue: {\n    type: [Number, String],\n    default: 0,\n  },\n  clickable: Boolean,\n  color: String,\n  height: {\n    type: [Number, String],\n    default: 4,\n  },\n  indeterminate: Boolean,\n  max: {\n    type: [Number, String],\n    default: 100,\n  },\n  modelValue: {\n    type: [Number, String],\n    default: 0,\n  },\n  reverse: Boolean,\n  stream: Boolean,\n  striped: Boolean,\n  roundedBar: Boolean,\n\n  ...makeComponentProps(),\n  ...makeLocationProps({ location: 'top' } as const),\n  ...makeRoundedProps(),\n  ...makeTagProps(),\n  ...makeThemeProps(),\n}, 'VProgressLinear')\n\nexport const VProgressLinear = genericComponent<VProgressLinearSlots>()({\n  name: 'VProgressLinear',\n\n  props: makeVProgressLinearProps(),\n\n  emits: {\n    'update:modelValue': (value: number) => true,\n  },\n\n  setup (props, { slots }) {\n    const progress = useProxiedModel(props, 'modelValue')\n    const { isRtl, rtlClasses } = useRtl()\n    const { themeClasses } = provideTheme(props)\n    const { locationStyles } = useLocation(props)\n    const { textColorClasses, textColorStyles } = useTextColor(props, 'color')\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(computed(() => props.bgColor || props.color))\n    const { backgroundColorClasses: barColorClasses, backgroundColorStyles: barColorStyles } = useBackgroundColor(props, 'color')\n    const { roundedClasses } = useRounded(props)\n    const { intersectionRef, isIntersecting } = useIntersectionObserver()\n\n    const max = computed(() => parseInt(props.max, 10))\n    const height = computed(() => parseInt(props.height, 10))\n    const normalizedBuffer = computed(() => parseFloat(props.bufferValue) / max.value * 100)\n    const normalizedValue = computed(() => parseFloat(progress.value) / max.value * 100)\n    const isReversed = computed(() => isRtl.value !== props.reverse)\n    const transition = computed(() => props.indeterminate ? 'fade-transition' : 'slide-x-transition')\n    const opacity = computed(() => {\n      return props.bgOpacity == null\n        ? props.bgOpacity\n        : parseFloat(props.bgOpacity)\n    })\n\n    function handleClick (e: MouseEvent) {\n      if (!intersectionRef.value) return\n\n      const { left, right, width } = intersectionRef.value.getBoundingClientRect()\n      const value = isReversed.value ? (width - e.clientX) + (right - width) : e.clientX - left\n\n      progress.value = Math.round(value / width * max.value)\n    }\n\n    useRender(() => (\n      <props.tag\n        ref={ intersectionRef }\n        class={[\n          'v-progress-linear',\n          {\n            'v-progress-linear--absolute': props.absolute,\n            'v-progress-linear--active': props.active && isIntersecting.value,\n            'v-progress-linear--reverse': isReversed.value,\n            'v-progress-linear--rounded': props.rounded,\n            'v-progress-linear--rounded-bar': props.roundedBar,\n            'v-progress-linear--striped': props.striped,\n          },\n          roundedClasses.value,\n          themeClasses.value,\n          rtlClasses.value,\n          props.class,\n        ]}\n        style={[\n          {\n            bottom: props.location === 'bottom' ? 0 : undefined,\n            top: props.location === 'top' ? 0 : undefined,\n            height: props.active ? convertToUnit(height.value) : 0,\n            '--v-progress-linear-height': convertToUnit(height.value),\n            ...locationStyles.value,\n          },\n          props.style,\n        ]}\n        role=\"progressbar\"\n        aria-hidden={ props.active ? 'false' : 'true' }\n        aria-valuemin=\"0\"\n        aria-valuemax={ props.max }\n        aria-valuenow={ props.indeterminate ? undefined : normalizedValue.value }\n        onClick={ props.clickable && handleClick }\n      >\n        { props.stream && (\n          <div\n            key=\"stream\"\n            class={[\n              'v-progress-linear__stream',\n              textColorClasses.value,\n            ]}\n            style={{\n              ...textColorStyles.value,\n              [isReversed.value ? 'left' : 'right']: convertToUnit(-height.value),\n              borderTop: `${convertToUnit(height.value / 2)} dotted`,\n              opacity: opacity.value,\n              top: `calc(50% - ${convertToUnit(height.value / 4)})`,\n              width: convertToUnit(100 - normalizedBuffer.value, '%'),\n              '--v-progress-linear-stream-to': convertToUnit(height.value * (isReversed.value ? 1 : -1)),\n            }}\n          />\n        )}\n\n        <div\n          class={[\n            'v-progress-linear__background',\n            backgroundColorClasses.value,\n          ]}\n          style={[\n            backgroundColorStyles.value,\n            {\n              opacity: opacity.value,\n              width: convertToUnit((!props.stream ? 100 : normalizedBuffer.value), '%'),\n            },\n          ]}\n        />\n\n        <Transition name={ transition.value }>\n          { !props.indeterminate ? (\n            <div\n              class={[\n                'v-progress-linear__determinate',\n                barColorClasses.value,\n              ]}\n              style={[\n                barColorStyles.value,\n                { width: convertToUnit(normalizedValue.value, '%') },\n              ]}\n            />\n          ) : (\n            <div class=\"v-progress-linear__indeterminate\">\n              {['long', 'short'].map(bar => (\n                <div\n                  key={ bar }\n                  class={[\n                    'v-progress-linear__indeterminate',\n                    bar,\n                    barColorClasses.value,\n                  ]}\n                  style={ barColorStyles.value }\n                />\n              ))}\n            </div>\n          )}\n        </Transition>\n\n        { slots.default && (\n          <div class=\"v-progress-linear__content\">\n            { slots.default({ value: normalizedValue.value, buffer: normalizedBuffer.value }) }\n          </div>\n        )}\n      </props.tag>\n    ))\n\n    return {}\n  },\n})\n\nexport type VProgressLinear = InstanceType<typeof VProgressLinear>\n", "// Utilities\nimport { onBeforeUnmount, ref, shallowRef, watch } from 'vue'\nimport { SUPPORTS_INTERSECTION } from '@/util'\n\nexport function useIntersectionObserver (callback?: IntersectionObserverCallback, options?: IntersectionObserverInit) {\n  const intersectionRef = ref<HTMLElement>()\n  const isIntersecting = shallowRef(false)\n\n  if (SUPPORTS_INTERSECTION) {\n    const observer = new IntersectionObserver((entries: IntersectionObserverEntry[]) => {\n      callback?.(entries, observer)\n\n      isIntersecting.value = !!entries.find(entry => entry.isIntersecting)\n    }, options)\n\n    onBeforeUnmount(() => {\n      observer.disconnect()\n    })\n\n    watch(intersectionRef, (newValue, oldValue) => {\n      if (oldValue) {\n        observer.unobserve(oldValue)\n        isIntersecting.value = false\n      }\n\n      if (newValue) observer.observe(newValue)\n    }, {\n      flush: 'post',\n    })\n  }\n\n  return { intersectionRef, isIntersecting }\n}\n", "// Components\nimport { VProgressLinear } from '@/components/VProgressLinear'\n\n// Utilities\nimport { computed } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nimport type { ExtractPropTypes, SetupContext } from 'vue'\nimport type { SlotsToProps } from '@/util'\n\nexport interface LoaderSlotProps {\n  color: string | undefined\n  isActive: boolean\n}\n\nexport interface LoaderProps {\n  loading?: boolean | string\n}\n\n// Composables\nexport const makeLoaderProps = propsFactory({\n  loading: [Boolean, String],\n}, 'loader')\n\nexport function useLoader (\n  props: LoaderProps,\n  name = getCurrentInstanceName(),\n) {\n  const loaderClasses = computed(() => ({\n    [`${name}--loading`]: props.loading,\n  }))\n\n  return { loaderClasses }\n}\n\nexport function LoaderSlot (\n  props: {\n    active: boolean\n    name: string\n    color?: string\n  } & ExtractPropTypes<SlotsToProps<{\n    default: LoaderSlotProps\n  }>>,\n  { slots }: SetupContext,\n) {\n  return (\n    <div class={ `${props.name}__loader` }>\n      { slots.default?.({\n        color: props.color,\n        isActive: props.active,\n      } as LoaderSlotProps) || (\n        <VProgressLinear\n          active={ props.active }\n          color={ props.color }\n          height=\"2\"\n          indeterminate\n        />\n      )}\n    </div>\n  )\n}\n"],
  "mappings": "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",
  "names": ["useIntersectionObserver", "callback", "options", "intersectionRef", "ref", "isIntersecting", "shallowRef", "SUPPORTS_INTERSECTION", "observer", "IntersectionObserver", "entries", "value", "find", "entry", "onBeforeUnmount", "disconnect", "watch", "newValue", "oldValue", "unobserve", "observe", "flush", "makeVProgressLinearProps", "propsFactory", "absolute", "Boolean", "active", "type", "default", "bgColor", "String", "bgOpacity", "Number", "bufferValue", "clickable", "color", "height", "indeterminate", "max", "modelValue", "reverse", "stream", "striped", "roundedBar", "makeComponentProps", "makeLocationProps", "location", "makeRoundedProps", "makeTagProps", "makeThemeProps", "VProgressLinear", "genericComponent", "name", "props", "emits", "value", "setup", "_ref", "slots", "progress", "useProxiedModel", "isRtl", "rtlClasses", "useRtl", "themeClasses", "provideTheme", "locationStyles", "useLocation", "textColorClasses", "textColorStyles", "useTextColor", "backgroundColorClasses", "backgroundColorStyles", "useBackgroundColor", "computed", "barColorClasses", "barColorStyles", "roundedClasses", "useRounded", "intersectionRef", "isIntersecting", "useIntersectionObserver", "parseInt", "normalizedBuffer", "parseFloat", "normalizedValue", "isReversed", "transition", "opacity", "handleClick", "e", "left", "right", "width", "getBoundingClientRect", "clientX", "Math", "round", "useRender", "_createVNode", "tag", "rounded", "class", "bottom", "undefined", "top", "convertToUnit", "style", "borderTop", "Transition", "map", "bar", "buffer", "makeLoaderProps", "propsFactory", "loading", "Boolean", "String", "useLoader", "props", "name", "arguments", "length", "undefined", "getCurrentInstanceName", "loaderClasses", "computed", "LoaderSlot", "_ref", "slots", "_createVNode", "default", "color", "isActive", "active", "VProgressLinear"]
}
