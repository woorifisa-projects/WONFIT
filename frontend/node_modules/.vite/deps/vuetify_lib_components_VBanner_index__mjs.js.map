{
  "version": 3,
  "sources": ["../../vuetify/src/components/VBanner/VBanner.tsx", "../../vuetify/src/components/VBanner/VBannerActions.tsx", "../../vuetify/src/components/VBanner/VBannerText.ts"],
  "sourcesContent": ["// Styles\nimport './VBanner.sass'\n\n// Components\nimport { VBannerActions } from './VBannerActions'\nimport { VBannerText } from './VBannerText'\nimport { VAvatar } from '@/components/VAvatar'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\n\n// Composables\nimport { makeBorderProps, useBorder } from '@/composables/border'\nimport { makeComponentProps } from '@/composables/component'\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { useDisplay } from '@/composables/display'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { IconValue } from '@/composables/icons'\nimport { makeLocationProps, useLocation } from '@/composables/location'\nimport { makePositionProps, usePosition } from '@/composables/position'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\n\n// Utilities\nimport { toRef } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport type VBannerSlots = {\n  default: never\n  prepend: never\n  text: never\n  actions: never\n}\n\nexport const makeVBannerProps = propsFactory({\n  avatar: String,\n  color: String,\n  icon: IconValue,\n  lines: String as PropType<'one' | 'two' | 'three'>,\n  stacked: Boolean,\n  sticky: Boolean,\n  text: String,\n\n  ...makeBorderProps(),\n  ...makeComponentProps(),\n  ...makeDensityProps(),\n  ...makeDimensionProps(),\n  ...makeElevationProps(),\n  ...makeLocationProps(),\n  ...makePositionProps(),\n  ...makeRoundedProps(),\n  ...makeTagProps(),\n  ...makeThemeProps(),\n}, 'VBanner')\n\nexport const VBanner = genericComponent<VBannerSlots>()({\n  name: 'VBanner',\n\n  props: makeVBannerProps(),\n\n  setup (props, { slots }) {\n    const { borderClasses } = useBorder(props)\n    const { densityClasses } = useDensity(props)\n    const { mobile } = useDisplay()\n    const { dimensionStyles } = useDimension(props)\n    const { elevationClasses } = useElevation(props)\n    const { locationStyles } = useLocation(props)\n    const { positionClasses } = usePosition(props)\n    const { roundedClasses } = useRounded(props)\n\n    const { themeClasses } = provideTheme(props)\n\n    const color = toRef(props, 'color')\n    const density = toRef(props, 'density')\n\n    provideDefaults({ VBannerActions: { color, density } })\n\n    useRender(() => {\n      const hasText = !!(props.text || slots.text)\n      const hasPrependMedia = !!(props.avatar || props.icon)\n      const hasPrepend = !!(hasPrependMedia || slots.prepend)\n\n      return (\n        <props.tag\n          class={[\n            'v-banner',\n            {\n              'v-banner--stacked': props.stacked || mobile.value,\n              'v-banner--sticky': props.sticky,\n              [`v-banner--${props.lines}-line`]: !!props.lines,\n            },\n            borderClasses.value,\n            densityClasses.value,\n            elevationClasses.value,\n            positionClasses.value,\n            roundedClasses.value,\n            themeClasses.value,\n            props.class,\n          ]}\n          style={[\n            dimensionStyles.value,\n            locationStyles.value,\n            props.style,\n          ]}\n          role=\"banner\"\n        >\n          { hasPrepend && (\n            <div key=\"prepend\" class=\"v-banner__prepend\">\n              { !slots.prepend ? (\n                <VAvatar\n                  key=\"prepend-avatar\"\n                  color={ color.value }\n                  density={ density.value }\n                  icon={ props.icon }\n                  image={ props.avatar }\n                />\n              ) : (\n                <VDefaultsProvider\n                  key=\"prepend-defaults\"\n                  disabled={ !hasPrependMedia }\n                  defaults={{\n                    VAvatar: {\n                      color: color.value,\n                      density: density.value,\n                      icon: props.icon,\n                      image: props.avatar,\n                    },\n                  }}\n                  v-slots:default={ slots.prepend }\n                />\n              )}\n            </div>\n          )}\n\n          <div class=\"v-banner__content\">\n            { hasText && (\n              <VBannerText key=\"text\">\n                { slots.text?.() ?? props.text }\n              </VBannerText>\n            )}\n\n            { slots.default?.() }\n          </div>\n\n          { slots.actions && (\n            <VBannerActions key=\"actions\" v-slots:default={ slots.actions } />\n          )}\n        </props.tag>\n      )\n    })\n  },\n})\n\nexport type VBanner = InstanceType<typeof VBanner>\n", "// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { provideDefaults } from '@/composables/defaults'\n\n// Utilities\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVBannerActionsProps = propsFactory({\n  color: String,\n  density: String,\n\n  ...makeComponentProps(),\n}, 'VBannerActions')\n\nexport const VBannerActions = genericComponent()({\n  name: 'VBannerActions',\n\n  props: makeVBannerActionsProps(),\n\n  setup (props, { slots }) {\n    provideDefaults({\n      VBtn: {\n        color: props.color,\n        density: props.density,\n        variant: 'text',\n      },\n    })\n\n    useRender(() => (\n      <div\n        class={[\n          'v-banner-actions',\n          props.class,\n        ]}\n        style={ props.style }\n      >\n        { slots.default?.() }\n      </div>\n    ))\n\n    return {}\n  },\n})\n\nexport type VBannerActions = InstanceType<typeof VBannerActions>\n", "// Utilities\nimport { createSimpleFunctional } from '@/util'\n\nexport const VBannerText = createSimpleFunctional('v-banner-text')\n\nexport type VBannerText = InstanceType<typeof VBannerText>\n"],
  "mappings": "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",
  "names": ["makeVBannerActionsProps", "propsFactory", "color", "String", "density", "makeComponentProps", "VBannerActions", "genericComponent", "name", "props", "setup", "_ref", "slots", "provideDefaults", "VBtn", "variant", "useRender", "_createVNode", "class", "style", "default", "VBannerText", "createSimpleFunctional", "makeVBannerProps", "propsFactory", "avatar", "String", "color", "icon", "IconValue", "lines", "stacked", "Boolean", "sticky", "text", "makeBorderProps", "makeComponentProps", "makeDensityProps", "makeDimensionProps", "makeElevationProps", "makeLocationProps", "makePositionProps", "makeRoundedProps", "makeTagProps", "makeThemeProps", "VBanner", "genericComponent", "name", "props", "setup", "_ref", "slots", "borderClasses", "useBorder", "densityClasses", "useDensity", "mobile", "useDisplay", "dimensionStyles", "useDimension", "elevationClasses", "useElevation", "locationStyles", "useLocation", "positionClasses", "usePosition", "roundedClasses", "useRounded", "themeClasses", "provideTheme", "toRef", "density", "provideDefaults", "VBannerActions", "useRender", "hasText", "hasPrependMedia", "hasPrepend", "prepend", "_createVNode", "tag", "value", "class", "style", "default", "VAvatar", "VDefaultsProvider", "image", "VBannerText", "actions"]
}
